function [y,imfp]=EMDFilter(x,allimf)
% Input:
% x is the input signal
% allimf is the imf generated by EMD
% Output:
% y is the output signal
% imfp is the reconstructed first several imfs
%% EMD filtering for ECG signals
%Refs£º
%B. Weng, M. Blanco-Velasco, and K. E. Barner, 
%¡°ECG denoising based on the empirical mode decomposition.,¡± 
%Ieee Embc, vol. 1, pp. 1¨C4, 2006.

%%
N=length(allimf);
M=length(x);
imfp=[];
y=zeros(1,M);
[Qvalue,~,Svalue,lenR]=QRSdetect(x);
% construct QRS preservation window w(i,j)
beta=0.45;
a=0.1;
for i=1:4
    imf=allimf{i};
    w=zeros(1,M);
    for j=1:lenR
        left_bd(j)=round(Qvalue(j)-i*beta*(Svalue(j)-Qvalue(j)));
        right_bd(j)=round(Svalue(j)+i*beta*(Svalue(j)-Qvalue(j)));
    end
    if(left_bd(1)<0)
        left_bd(1)=0;
    end
    if(right_bd(end)>M)
        right_bd(end)=M;
    end
    for j=1:lenR
        for k=left_bd(j):Qvalue(j)
            w(k)=(1+cos(pi*(k-Qvalue(j))/(left_bd(j)-Qvalue(j))))/2;
        end
        for k=Svalue(j):right_bd(j)
            w(k)=(1+cos(pi*(k-Svalue(j))/(right_bd(j)-Svalue(j))))/2;
        end   
        for k=Qvalue(j):Svalue(j)
            w(k)=1;
        end 
    end
        imfp=imf.*w+imf.*(ones(1,M)-w)*(a+0.05);
        
        figure
        subplot(211)
        plot(imf);
        ylabel(sprintf('imf%d',i));
        subplot(212)
        plot(imfp);
        title('imfp')
        ylabel(sprintf('imfp%d',i));
        
        y=y+imfp;
        imfp(i,:)=imfp;
end
for i=5:N
    imf=allimf{i};
    y=y+imf;
end
figure
        subplot(211)
        plot(x);
        title('noisy signal')
        grid on
        subplot(212)
        plot(y);
        title('EMD filtering')
        grid on
end

function [Q,R,S,lenR]=QRSdetect(ecg,fs) 
%% Description
% detect ecg signal QRS wave
%% Inputs
% ecg : raw ecg vector
% fs : sampling frequency

%% Outputs
% QRS wave index
%
%% usage
% for example after loading the the ecg mat files in matlab call the
% function as below ;
% [Q,R,S]=QRSdetect(ecg,500)

%% Author : Lisha Chen    
% contact : lishachen00@gmail.com , lisha_chen@hust.edu.cn
% Dont forget to reference if you found this script usefull
%%

    if nargin <2
       fs = 360; %default Sampling frequency
    end    
lenSig=length(ecg);
%% parameters

Ponr=0.187; Poffr=0.279; Pr=0.233;
QRSonr=0.308; QRSoffr=0.456; Qr=0.349;
Rr=0.382; Sr=0.422;
STr=0.534; Tr=0.619; Toffr=0.709;

para.Ponr=Ponr; para.Poffr=Poffr; para.Pr=Pr;
para.QRSonr=QRSonr; para.QRSoffr=QRSoffr; para.Qr=Qr;
para.Rr=Rr; para.Sr=Sr;
para.STr=STr; para.Tr=Tr; para.Toffr=Toffr;


%% ECG signal preprocess-remove noise
ecg = ecg (:); % make sure its a vector
ecgRaw=ecg;
%Noise cancelation(Filtering)
f1=0.5; %cuttoff low frequency to get rid of baseline wander
f2=45; %cuttoff frequency to discard high frequency noise
Wn=[f1 f2]*2/fs; % cutt off based on fs
N = 3; % order of 3 less processing
[a,b] = butter(N,Wn); %bandpass filtering
ecgButter = filtfilt(a,b,ecg);

h=fspecial('average',[10 1]);
ecg00=conv(ecg,h,'same');

cwtsig6=cwt(ecg,6,'mexh'); 
ecg01=cwtsig6; 

f1=0.5; % cuttoff low frequency to get rid of baseline wander
f2=20; % cuttoff frequency to discard high frequency noise
Wn=[f1 f2]*2/fs; % cut off based on fs
N = 3; % order of 3 less processing
[a,b] = butter(N,Wn); % bandpass filtering

diffECG00=diff(ecg00);
%% detect R
R=rDetect(ecg,fs);
R=R(:);
lenR=length(R);
%% initialize and calculate parameters


cwtsig8=cwt(ecgRaw,8,'mexh'); 
Tsample=mean(R(2:end)-R(1:end-1));

trans=mean(((R./Tsample)'-(0:lenR-1)))-Rr;
% trans is the relevant displacement

QRSonr=QRSonr+trans;QRSoffr=QRSoffr+trans;
Qr=Qr+trans;
Rr=Rr+trans;
Sr=Sr+trans;

% 
%% detect Q S QRSon QRSoff
%---------------Q---------------------------------------------------------
Q=qDetect(ecgRaw,cwtsig8,Tsample,R,QRSonr,Qr,Rr);

%---------------S---------------------------------------------------------
S=sDetect(ecgRaw,cwtsig8,Tsample,R,QRSoffr,Sr,Rr);

%% plot

% figure,
% plot(ecgRaw);
% hold on
% 
% plot(Q(Q~=0),ecgRaw(Q(Q~=0)),'r*');
% plot(R(R~=0),ecgRaw(R(R~=0)),'r*');
% plot(S(S~=0),ecgRaw(S(S~=0)),'r*'); 
% 
% hold off
end


function S=sDetect(ecgRaw,wtsig2,Tsample,R,QRSoffr,Sr,Rr)
lenR=length(R);
lenSig=length(ecgRaw);
iEnd=lenR;
S = zeros(lenR,1);
if lenSig-R(end)<0.5*ceil((Sr-Rr)*Tsample)
   iEnd=lenR-1;
end
for i=1:iEnd
    tempSvalue=[];
    for j=ceil(R(i)+1:1:min((R(i)+ceil(1.5*(QRSoffr-Rr)*Tsample)),lenSig)) 
           if (wtsig2(j)<=wtsig2(j-1))&&(wtsig2(j)<=wtsig2(j+1)) %min extreme points
          tempSvalue=ceil(j+0.04*Tsample); %detection window starting index
               break
           end
    end
    if isempty(tempSvalue)
        tempSvalue=R(i)+ceil(1.5*(QRSoffr-Rr)*Tsample);
    end
    
    x1=tempSvalue; %(x1,y1)--S wave candidates coordinate
    y1=ecgRaw(tempSvalue); 
    x2=R(i); %(x2,y2)--R wave coordinate
    y2=ecgRaw(R(i)); 
    a0=(y2-y1)/(x2-x1); 
    b0=-1; 
    c0=-a0*x1+y1; %line ax+by+c=0 
    dist=[]; 
    for k=R(i):tempSvalue 
        tempdist=(abs(a0*k+b0*ecgRaw(k)+c0))/sqrt(a0^2+b0^2); 
        dist=[dist;tempdist]; 
    end  %distance between 2 points           
    [~,b]=max(dist);  
    tempSvalue=R(i)+b-1; 
   l=R(i):(tempSvalue+10); 
   [~,d]=min(ecgRaw(l)); 
   tempSvalue=R(i)+d-1; %correct coordinates based on ecgRaw
   S(i)=tempSvalue; %S--S wave index      
end 
% figure,
% plot(ecgRaw);
% hold on
% plot(S(S~=0),ecgRaw(S(S~=0)),'r*');
end

function Q=qDetect(ecgRaw,wtsig2,Tsample,R,QRSonr,Qr,Rr)
lenR=length(R);
Q = zeros(lenR,1);
iStart=1;
if Qr<0
  iStart=2;
end
lenR=length(R);
% find local min; determine search window
for i=iStart:lenR 
    tempQvalue=[];
    for j=ceil(R(i)-1:-1:max([(R(i)+1.5*(QRSonr-Rr)*Tsample),2])) 
            if wtsig2(j)<=wtsig2(j-1)&&wtsig2(j)<=wtsig2(j+1) %min extreme points
                tempQvalue=ceil(j-0.04*Tsample); %detection window starting index
            break
            end
    end
    if isempty(tempQvalue)
        tempQvalue=R(i)+ceil(1.5*(QRSonr-Rr)*Tsample);
    end
 
    x1=tempQvalue; %(x1,y1)--Q wave candidates coordinate
    y1=ecgRaw(tempQvalue); 
    x2=R(i); %(x2,y2)--R wave coordinate
    y2=ecgRaw(R(i)); 
    a0=(y2-y1)/(x2-x1); 
    b0=-1; 
    c0=-a0*x1+y1; 
    dist=[]; 
    for k=tempQvalue:R(i) 
        tempdist=(abs(a0*k+b0*ecgRaw(k)+c0))/sqrt(a0^2+b0^2); 
        dist=[dist;tempdist]; 
    end   %distance between 2 points
    [~,b]=max(dist); %max of distance
    tempQvalue=tempQvalue+b-1;
    l=(tempQvalue-5):R(i); 
    [~,d]=min(ecgRaw(l)); 
    tempQvalue=tempQvalue-6+d; %correct coordinates based on ecgRaw
    Q(i)=tempQvalue; %Q--Q wave index     
end

% figure,
% plot(ecgRaw);
% hold on
% plot(Q(Q~=0),ecgRaw(Q(Q~=0)),'r*');
end

function R=rDetect(ecg,fs)
%Refs:
%http://www.librow.com/cases/case-2

    %   Remove lower frequencies
    fresult=fft(ecg);
    fresult(1 : round(length(fresult)*5/fs))=0;
    fresult(end - round(length(fresult)*5/fs) : end)=0;
    corrected=real(ifft(fresult));
    %   Filter - first pass
    WinSize = floor(fs * 571 / 1000);
    if rem(WinSize,2)==0
        WinSize = WinSize+1;
    end
    filtered1=ecgdemowinmax(corrected, WinSize);
    %   Scale ecg
    peaks1=filtered1/(max(filtered1)/7);
    %   Filter by threshold filter
    for data = 1:1:length(peaks1)
        if peaks1(data) < 4
            peaks1(data) = 0;
        else
            peaks1(data)=1;
        end
    end
    positions=find(peaks1);
    distance=positions(2)-positions(1);
    for data=1:1:length(positions)-1
        if positions(data+1)-positions(data)<distance
            distance=positions(data+1)-positions(data);
        end
    end
    % Optimize filter window size
    QRdistance=floor(0.04*fs);
    if rem(QRdistance,2)==0
        QRdistance=QRdistance+1;
    end
    WinSize=2*distance-QRdistance;
    % Filter - second pass
    filtered2=ecgdemowinmax(corrected, WinSize);
    peaks2=filtered2;
    for data=1:1:length(peaks2)
        if peaks2(data)<4
            peaks2(data)=0;
        else
            peaks2(data)=1;
        end
    end

R=find(peaks2==1);
% figure,
% plot(ecg);
% hold on
% plot(R,ecg(R),'r*');
end
function Filtered=ecgdemowinmax(Original, WinSize)
%Refs:
%http://www.librow.com/cases/case-2
    WinHalfSize = floor(WinSize/2);
    WinHalfSizePlus = WinHalfSize+1;
    WinSizeSpec = WinSize-1;
    FrontIterator = 1;
    WinPos = WinHalfSize;
    WinMaxPos = WinHalfSize;
    WinMax = Original(1);
    OutputIterator = 0;
    for LengthCounter = 0:1:WinHalfSize-1
        if Original(FrontIterator+1) > WinMax
            WinMax = Original(FrontIterator+1);
            WinMaxPos = WinHalfSizePlus + LengthCounter;
        end
        FrontIterator=FrontIterator+1;
    end
    if WinMaxPos == WinHalfSize
        Filtered(OutputIterator+1)=WinMax;
    else
        Filtered(OutputIterator+1)=0;
    end
    OutputIterator = OutputIterator+1;
    for LengthCounter = 0:1:WinHalfSize-1
        if Original(FrontIterator+1)>WinMax
            WinMax=Original(FrontIterator+1);
            WinMaxPos=WinSizeSpec;
        else
            WinMaxPos=WinMaxPos-1;
        end
        if WinMaxPos == WinHalfSize
            Filtered(OutputIterator+1)=WinMax;
        else
            Filtered(OutputIterator+1)=0;
        end
        FrontIterator = FrontIterator+1;
        OutputIterator = OutputIterator+1;
    end
    for FrontIterator=FrontIterator:1:length(Original)-1
        if Original(FrontIterator+1)>WinMax
            WinMax=Original(FrontIterator+1);
            WinMaxPos=WinSizeSpec;
        else
            WinMaxPos=WinMaxPos-1;
            if WinMaxPos < 0
                WinIterator = FrontIterator-WinSizeSpec;
                WinMax = Original(WinIterator+1);
                WinMaxPos = 0;
                WinPos=0;
                for WinIterator = WinIterator:1:FrontIterator
                    if Original(WinIterator+1)>WinMax
                        WinMax = Original(WinIterator+1);
                        WinMaxPos = WinPos;
                    end
                    WinPos=WinPos+1;
                end
            end
        end
        if WinMaxPos==WinHalfSize
            Filtered(OutputIterator+1)=WinMax;
        else
            Filtered(OutputIterator+1)=0;
        end
        OutputIterator=OutputIterator+1;
    end
    WinIterator = WinIterator-1;
    WinMaxPos = WinMaxPos-1;
    for LengthCounter=1:1:WinHalfSizePlus-1
        if WinMaxPos<0
            WinIterator=length(Original)-WinSize+LengthCounter;
            WinMax=Original(WinIterator+1);
            WinMaxPos=0;
            WinPos=1;
            for WinIterator=WinIterator+1:1:length(Original)-1
                if Original(WinIterator+1)>WinMax
                    WinMax=Original(WinIterator+1);
                    WinMaxPos=WinPos;
                end
                WinPos=WinPos+1;
            end
        end
        if WinMaxPos==WinHalfSize
            Filtered(OutputIterator+1)=WinMax;
        else
            Filtered(OutputIterator+1)=0;
        end
        FrontIterator=FrontIterator-1;
        WinMaxPos=WinMaxPos-1;
        OutputIterator=OutputIterator+1;
    end
end